{"version":3,"sources":["Todolist/Todolist.module.css","App.module.css","common/AddItemForm/AddItemForm.module.css","Task/Task.module.css","Login/Login.module.css","Task/Task.tsx","common/AddItemForm/AddItemForm.tsx","common/EditableDiv/EditableDiv.tsx","api/todolosts-api.ts","redux/tasks-reducer.ts","Todolist/Todolist.tsx","redux/todolists-reducer.ts","Todolists/Todolists.tsx","redux/auth-reducer.ts","Login/Login.tsx","Error404/Error404.tsx","redux/app-reducer.ts","App.tsx","reportWebVitals.ts","redux/redux-store.ts","index.tsx"],"names":["module","exports","TaskStatus","TaskPriorities","AddItemForm","props","useState","title","setTitle","className","s","addItemForm","type","value","onChange","e","currentTarget","onKeyPress","charCode","callback","onClick","size","shape","style","margin","icon","PlusOutlined","EditableDiv","React","memo","editMode","setEditMode","autoFocus","onBlur","width","onDoubleClick","Task","onTitleChangeHandler","useCallback","newValue","changeTaskTitle","taskId","todolistId","task","checked","status","Completed","newIsDoneValue","target","changeTaskStatus","New","deleteTask","DeleteTwoTone","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","delete","id","put","tasksAPI","model","authAPI","data","initialState","Todolist","dispatch","useDispatch","filter","setFilter","useEffect","then","res","tasks","items","setTasks","changeTodolistTitle","filteredTasks","t","todolist","bordered","extra","removeTodolist","addTask","map","todoListId","filterButtons","Todolists","todolists","isLoggedIn","useSelector","state","auth","removeTask","deleteTaskTC","addNewTodolist","resultCode","newTodolistId","item","addTodolist","addTodolistTC","addTaskTC","removeTodolistTC","getState","currentTask","find","description","deadline","priority","startDate","changeTaskStatusAC","changeTaskStatusTC","newTitle","changeTaskTitleAC","updateTaskTitleTC","changeTodolistTitleAC","updateTodolistTitleTC","addNewTodo","justify","gutter","tl","allTodolistTasks","xs","sm","md","lg","xl","xxl","to","PATH","LOGIN","setIsLoggedIn","Login","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","tailLayout","wrapperCol","offset","span","TODOS","login","backgroundColor","textAlign","padding","onFinish","handleSubmit","labelCol","Item","label","getFieldProps","Password","htmlType","Error404","subTitle","isInitialized","App","Header","Layout","Content","Footer","app","isModalVisible","setIsModalVisible","visible","onOk","onCancel","exact","path","render","align","height","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","newTodolist","addedDate","order","stateCopy","forEach","newTasks","todolistTasks","newTasksArray","store","createStore","applyMiddleware","thunk","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2cfbd2c9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"Todolist_todolist__2GHRM\",\"filterButtons\":\"Todolist_filterButtons__1XsU7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addNewTodo\":\"App_addNewTodo__2wks0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addItemForm\":\"AddItemForm_addItemForm__34y95\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__27E1W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2cSAn\"};","import React, {useCallback} from 'react';\r\nimport s from './Task.module.css'\r\nimport {Button, Checkbox} from 'antd';\r\nimport {DeleteTwoTone} from '@ant-design/icons';\r\nimport {CheckboxChangeEvent} from 'antd/lib/checkbox';\r\nimport {EditableDiv} from '../common/EditableDiv/EditableDiv';\r\n\r\nexport enum TaskStatus {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatus\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype TaskPropsType = {\r\n    title: string\r\n    taskId: string\r\n    todolistId: string\r\n    deleteTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (status: TaskStatus, todolistId: string, taskId: string) => void\r\n    status: TaskStatus\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onDeleteTaskClick = () => {\r\n        props.deleteTask(props.taskId, props.todolistId)\r\n    }\r\n\r\n    const onCheckboxHandler = (e: CheckboxChangeEvent) => {\r\n        let newIsDoneValue = e.target.checked\r\n        props.changeTaskStatus(newIsDoneValue ? TaskStatus.Completed : TaskStatus.New, props.todolistId, props.taskId)\r\n    }\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.taskId, newValue, props.todolistId)\r\n    }, [props.taskId, props.todolistId]);\r\n\r\n    return (\r\n        <div className={s.task}>\r\n            <span>\r\n                <Checkbox style={{margin: '0 10px 0 0'}} checked={props.status === TaskStatus.Completed}\r\n                          onChange={onCheckboxHandler}/>\r\n            </span>\r\n            <EditableDiv value={props.title} onChange={onTitleChangeHandler}/>\r\n            <span>\r\n                <Button onClick={onDeleteTaskClick} type='text' shape=\"circle\" icon={<DeleteTwoTone/>}\r\n                        size='middle'/>\r\n            </span>\r\n        </div>\r\n    )\r\n})\r\n","import React, {ChangeEvent, MouseEvent, useState, KeyboardEvent} from 'react';\r\nimport {Button, Input} from 'antd';\r\nimport s from './AddItemForm.module.css'\r\nimport {PlusOutlined} from '@ant-design/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    callback: (newTitle: string) => void\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormPropsType) => {\r\n\r\n    let [title, setTitle] = useState('')\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onClickHandler = (e: MouseEvent<HTMLButtonElement>) => {\r\n        props.callback(title)\r\n        setTitle('')\r\n    }\r\n\r\n    const onEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(e.charCode === 13){\r\n            props.callback(title)\r\n            setTitle('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.addItemForm}>\r\n            <Input type='text' value={title} onChange={onChangeHandler} onKeyPress={onEnterHandler}/>\r\n            <Button onClick={onClickHandler} type='primary' size='small' shape=\"circle\"\r\n                    style={{margin: '0 5px'}} icon={<PlusOutlined />} />\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Input} from 'antd';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableDiv = React.memo(function (props: EditableSpanPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(e.charCode === 13){\r\n            setEditMode(false);\r\n            props.onChange(title);\r\n        }\r\n    }\r\n\r\n    return editMode\r\n        ? <Input value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} onKeyPress={onEnterHandler}/>\r\n        : <div style={{width: '100%'}} onDoubleClick={activateEditMode}>{props.value}</div>\r\n});","import axios from 'axios'\r\nimport {TaskPriorities, TaskStatus, TaskType} from '../Task/Task';\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '99efda20-dfa9-469b-8832-45007a73919e'\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get('todo-lists')\r\n    },\r\n    addTodolist(title: string) {\r\n        return instance.post(`todo-lists`, {title: title})\r\n    },\r\n    removeTodolist(todolistId: string) {\r\n        return instance.delete(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    }\r\n}\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    removeTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    addTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>(`auth/login`, data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>(`auth/me`)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatus\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}","import {Dispatch} from 'redux';\r\nimport {tasksAPI, UpdateTaskModelType} from '../api/todolosts-api';\r\nimport {TaskStatus, TaskType} from '../Task/Task';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer';\r\nimport {AppRootStateType} from './redux-store';\r\n\r\nexport type SetTasksActionType = ReturnType<typeof setTasks>\r\nexport type DeleteTaskActionType = ReturnType<typeof deleteTask>\r\nexport type AddTaskActionType = ReturnType<typeof addTask>\r\nexport type ChangeTaskStatusActionType = ReturnType<typeof changeTaskStatusAC>\r\nexport type ChangeTaskTitleActionType = ReturnType<typeof changeTaskTitleAC>\r\n\r\ntype ActionType =\r\n    SetTodolistsActionType\r\n    | SetTasksActionType\r\n    | DeleteTaskActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst initialState: any = []\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET_TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case 'SET_TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE_TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId]\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId)\r\n            stateCopy[action.todolistId] = newTasks\r\n            return stateCopy\r\n        }\r\n        case 'ADD_TASK': {\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        }\r\n        case 'ADD_TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'CHANGE_TASK_STATUS': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId]\r\n            const newTasks = tasks.map(t => t.id === action.taskId ? {...t, status: action.status} : t)\r\n            stateCopy[action.todolistId] = newTasks\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'REMOVE_TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todolistId]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setTasks = (tasks: any, todolistId: any) => ({type: 'SET_TASKS', tasks, todolistId} as const)\r\n\r\nexport const deleteTask = (taskId: string, todolistId: string) => ({type: 'REMOVE_TASK', taskId, todolistId} as const)\r\n\r\nexport const addTask = (task: TaskType) => ({type: 'ADD_TASK', task} as const)\r\n\r\nexport const changeTaskStatusAC = (status: TaskStatus, todolistId: string, taskId: string) => (\r\n    {type: 'CHANGE_TASK_STATUS', status, todolistId, taskId} as const)\r\n\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId} as const\r\n}\r\n\r\nexport const fetchTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        tasksAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                const tasks = res.data.items\r\n                dispatch(setTasks(tasks, todolistId))\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport const deleteTaskTC = (taskId: string, todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        tasksAPI.removeTask(todolistId, taskId)\r\n            .then((res) => {\r\n                dispatch(deleteTask(taskId, todolistId))\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        tasksAPI.addTask(todolistId, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTask(res.data.data.item))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeTaskStatusTC = (status: TaskStatus, todolistId: string, taskId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n        const task = getState().tasks[todolistId]\r\n        const currentTask = task.find((t) => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        if (currentTask) {\r\n            const model: UpdateTaskModelType = {\r\n                title: currentTask.title,\r\n                description: currentTask.description,\r\n                deadline: currentTask.deadline,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                status: status\r\n            }\r\n            tasksAPI.updateTask(todolistId, taskId, model)\r\n                .then((res) => {\r\n                    dispatch(changeTaskStatusAC(status, todolistId, taskId))\r\n                })\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const updateTaskTitleTC = (todolistId: string, taskId: string, title: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n        const task = getState().tasks[todolistId]\r\n        const currentTask = task.find((t) => {\r\n            return t.id === taskId\r\n        })\r\n        if (currentTask) {\r\n            tasksAPI.updateTask(todolistId, taskId, {\r\n                status: currentTask.status,\r\n                deadline: currentTask.deadline,\r\n                description: currentTask.description,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                title: title\r\n            }).then((res) => {\r\n                dispatch(changeTaskTitleAC(taskId, title, todolistId))\r\n            })\r\n        }\r\n\r\n    }","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {Task, TaskStatus, TaskType} from '../Task/Task';\r\nimport s from './Todolist.module.css'\r\nimport {useDispatch} from 'react-redux';\r\nimport {fetchTasksTC} from '../redux/tasks-reducer';\r\nimport {AddItemForm} from '../common/AddItemForm/AddItemForm';\r\nimport {DeleteTwoTone} from '@ant-design/icons';\r\nimport {Button, Card} from 'antd';\r\nimport {EditableDiv} from '../common/EditableDiv/EditableDiv';\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    deleteTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (status: TaskStatus, todolistId: string, taskId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\nexport type FilterType = 'all' | 'completed' | 'active'\r\n\r\n\r\nexport const Todolist = React.memo((props: TodolistPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const [filter, setFilter] = useState<FilterType>('all')\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [dispatch, props.id])\r\n\r\n    const onDeleteTodolistClick = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const addTaskClick = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllFilter = () => {\r\n        setFilter('all')\r\n    }\r\n    const onActiveFilter = () => {\r\n        setFilter('active')\r\n    }\r\n    const onCompletedFilter = () => {\r\n        setFilter('completed')\r\n    }\r\n\r\n    let filteredTasks = props.tasks\r\n\r\n    if (filter === 'active') {\r\n        filteredTasks = props.tasks.filter(t => t.status !== TaskStatus.Completed)\r\n    }\r\n    if (filter === 'completed') {\r\n        filteredTasks = props.tasks.filter(t => t.status === TaskStatus.Completed)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.todolist}>\r\n\r\n            <Card title={<EditableDiv value={props.title} onChange={changeTodolistTitle}/>} bordered={false}\r\n                  extra={<Button onClick={onDeleteTodolistClick} type='text' shape=\"circle\"\r\n                                 icon={<DeleteTwoTone/>} size='large'/>}\r\n                  style={{margin: '15px 0'}}\r\n            >\r\n                <AddItemForm callback={addTaskClick}/>\r\n                <div>\r\n                    {\r\n                        filteredTasks.map((t) => {\r\n                            return <Task key={t.id} title={t.title} taskId={t.id} todolistId={t.todoListId}\r\n                                         deleteTask={props.deleteTask} changeTaskStatus={props.changeTaskStatus}\r\n                                         status={t.status} changeTaskTitle={props.changeTaskTitle}/>\r\n                        })\r\n                    }\r\n                </div>\r\n                <div className={s.filterButtons}>\r\n                    <Button type={filter === 'all' ? 'primary' : 'default'} onClick={onAllFilter}>All</Button>\r\n                    <Button type={filter === 'active' ? 'primary' : 'default'} onClick={onActiveFilter}>Active</Button>\r\n                    <Button type={filter === 'completed' ? 'primary' : 'default'} onClick={onCompletedFilter}>Completed</Button>\r\n                </div>\r\n            </Card>\r\n        </div>\r\n\r\n    )\r\n})","import {TodolistType} from '../Todolist/Todolist';\r\nimport {Dispatch} from 'redux';\r\nimport {todolistsAPI} from '../api/todolosts-api';\r\n\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolists>\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolist>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolist>\r\nexport type ChangeTodolistTitleActionType = ReturnType<typeof changeTodolistTitleAC>\r\n\r\ntype ActionType = SetTodolistsActionType | AddTodolistActionType | RemoveTodolistActionType | ChangeTodolistTitleActionType\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'SET_TODOLISTS': {\r\n            return action.todolists\r\n        }\r\n        case 'ADD_TODOLIST': {\r\n            const newTodolist: TodolistType = {\r\n                title: action.title,\r\n                id: action.todolistId,\r\n                addedDate: '',\r\n                order: 0\r\n            }\r\n            return [newTodolist, ...state]\r\n        }\r\n        case 'REMOVE_TODOLIST': {\r\n            return state.filter(t => t.id !== action.todolistId)\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setTodolists = (todolists: Array<TodolistType>) => ({type: 'SET_TODOLISTS', todolists} as const)\r\nexport const addTodolist = (title: string, todolistId: string) => ({type: 'ADD_TODOLIST', title, todolistId} as const)\r\nexport const removeTodolist = (todolistId: string) => ({type: 'REMOVE_TODOLIST', todolistId} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({type: 'CHANGE-TODOLIST-TITLE', id: id, title: title} as const)\r\n\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolists(res.data))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.addTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    const newTodolistId = res.data.data.item.id\r\n                    dispatch(addTodolist(title, newTodolistId))\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.removeTodolist(todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTodolist(todolistId))\r\n                }\r\n        })\r\n\r\n    }\r\n}\r\n\r\nexport const updateTodolistTitleTC = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.updateTodolist(id, title)\r\n        .then(() => {\r\n            dispatch(changeTodolistTitleAC(id, title))\r\n        })\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport s from '../App.module.css';\r\nimport {AddItemForm} from '../common/AddItemForm/AddItemForm';\r\nimport {Col, Row, Spin} from 'antd';\r\nimport {Todolist, TodolistType} from '../Todolist/Todolist';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../redux/redux-store';\r\nimport {addTaskTC, changeTaskStatusTC, deleteTaskTC, TasksStateType, updateTaskTitleTC} from '../redux/tasks-reducer';\r\nimport {addTodolistTC, fetchTodolistsTC, removeTodolistTC, updateTodolistTitleTC} from '../redux/todolists-reducer';\r\nimport {TaskStatus} from '../Task/Task';\r\nimport {PATH} from '../App';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\nexport const Todolists = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [dispatch])\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    let todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    let tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\r\n        dispatch(deleteTaskTC(taskId, todolistId))\r\n    }, [dispatch])\r\n\r\n    const addNewTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(title, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((status: TaskStatus, todolistId: string, taskId: string) => {\r\n        dispatch(changeTaskStatusTC(status, todolistId, taskId))\r\n    }, [dispatch])\r\n\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTitleTC(todolistId, id, newTitle))\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(updateTodolistTitleTC(id, title))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.addNewTodo}>\r\n                <AddItemForm callback={addNewTodolist}/>\r\n            </div>\r\n            {/*<div style={{textAlign: 'center'}}>*/}\r\n            {/*    <Spin />*/}\r\n            {/*</div>*/}\r\n            <div className=\"site-card-wrapper\">\r\n                <Row justify='center' gutter={16}>\r\n                    {\r\n                        todolists.map((tl) => {\r\n                            let allTodolistTasks = tasks[tl.id]\r\n\r\n                            return (\r\n                                <Col xs={22} sm={12} md={10} lg={8} xl={6} xxl={6}>\r\n                                    <Todolist key={tl.id} id={tl.id} title={tl.title}\r\n                                              tasks={allTodolistTasks}\r\n                                              deleteTask={removeTask} removeTodolist={removeTodolist}\r\n                                              addTask={addTask} changeTaskStatus={changeTaskStatus}\r\n                                              changeTaskTitle={changeTaskTitle}\r\n                                              changeTodolistTitle={changeTodolistTitle}/>\r\n                                </Col>\r\n                            )\r\n                        })}\r\n                </Row>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {Dispatch} from 'redux';\r\nimport {authAPI, LoginParamsType} from '../api/todolosts-api';\r\n\r\nexport type SetIsLoggedInActionType = ReturnType<typeof setIsLoggedIn>\r\n\r\ntype ActionType = SetIsLoggedInActionType\r\n\r\nexport type AuthStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: AuthStateType = initialState, action: ActionType): AuthStateType => {\r\n    switch (action.type) {\r\n        case 'SET_IS_LOGGED_IN': {\r\n            return {...state, isLoggedIn: action.value}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setIsLoggedIn = (value: boolean) => ({type: 'SET_IS_LOGGED_IN', value} as const)\r\n\r\n\r\nexport const setIsLoggedInTC = (data: LoginParamsType) => {\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.login(data)\r\n            .then((res) => {\r\n                if(res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedIn(true))\r\n                }\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport const setIsLoggedOutTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.logout()\r\n            .then((res) => {\r\n                if(res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedIn(false))\r\n                }\r\n            })\r\n\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './Login.module.css'\r\nimport {useFormik} from 'formik';\r\nimport {Button, Checkbox, Col, Form, Input, Row} from 'antd';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../redux/redux-store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {PATH} from '../App';\r\nimport {setIsLoggedInTC} from '../redux/auth-reducer';\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(setIsLoggedInTC(values))\r\n        },\r\n    });\r\n\r\n    const layout = {\r\n        labelCol: {span: 6},\r\n        wrapperCol: {span: 16},\r\n    }\r\n    const tailLayout = {\r\n        wrapperCol: {offset: 6, span: 16},\r\n    };\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={PATH.TODOS}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.login}>\r\n            <Row justify='center'>\r\n                <Col xs={18} sm={16} md={12} lg={10} xl={8} xxl={4} style={{backgroundColor: '#fff'}}>\r\n                    <div style={{textAlign: 'center', padding: '10px 0 0 5px'}}>\r\n                        <p>To log in get registered here</p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </div>\r\n                    <Form onFinish={formik.handleSubmit}\r\n                          {...layout}>\r\n                        <Form.Item label='Email'>\r\n                            <Input\r\n                                id='email'\r\n                                type='email'\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                        </Form.Item>\r\n                        <Form.Item label='Password'>\r\n                            <Input.Password\r\n                                id='password'\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n                        </Form.Item>\r\n                        <Form.Item {...tailLayout}>\r\n                            <Checkbox id='rememberMe' {...formik.getFieldProps('rememberMe')}>Remember me</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item {...tailLayout}>\r\n                            <Button type='primary' htmlType='submit'>Submit</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Button, Result} from 'antd';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {PATH} from '../App';\r\n\r\nexport const Error404 = () => {\r\n    return (\r\n        <div>\r\n            <Result\r\n                status=\"404\"\r\n                title=\"404\"\r\n                subTitle=\"Sorry, the page you visited does not exist.\"\r\n                extra={<Button type=\"primary\"><NavLink to={PATH.TODOS}>Back Home</NavLink></Button>}\r\n            />\r\n        </div>\r\n    )\r\n}","import {Dispatch} from 'redux';\r\nimport {authAPI} from '../api/todolosts-api';\r\nimport {setIsLoggedIn} from './auth-reducer';\r\n\r\n\r\nexport type SetIsInitializedActionType = ReturnType<typeof setIsInitialized>\r\n\r\ntype ActionType = SetIsInitializedActionType\r\n\r\nexport type AppStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: AppStateType = initialState, action: ActionType): AppStateType => {\r\n    switch (action.type) {\r\n        case 'SET_IS_INITIALIZED': {\r\n            return {...state, isInitialized: action.value}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setIsInitialized = (value: boolean) => ({type: 'SET_IS_INITIALIZED', value} as const)\r\n\r\n\r\nexport const setIsInitializedTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.me()\r\n            .then((res) => {\r\n                if(res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedIn(true))\r\n                }\r\n                dispatch(setIsInitialized(true))\r\n            })\r\n\r\n    }\r\n}\r\n\r\n\r\n","import React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {Button, Col, Layout, Modal, Row, Spin} from 'antd';\nimport {Todolists} from './Todolists/Todolists';\nimport {Route, Switch} from 'react-router-dom';\nimport {Login} from './Login/Login';\nimport {Error404} from './Error404/Error404';\nimport {AppRootStateType} from './redux/redux-store';\nimport {setIsLoggedOutTC} from './redux/auth-reducer';\nimport {setIsInitializedTC} from './redux/app-reducer';\n\nexport const PATH = {\n    TODOS: '/',\n    LOGIN: '/login',\n}\n\nconst App = () => {\n    const dispatch = useDispatch()\n\n    const {Header, Content, Footer} = Layout;\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\n\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    const onLogoutClickModal = () => {\n        setIsModalVisible(true)\n    }\n\n    const logout = () => {\n        setIsModalVisible(false)\n        dispatch(setIsLoggedOutTC())\n    }\n    const closeModal = () => {\n        setIsModalVisible(false)\n    }\n\n    useEffect(() => {\n        dispatch(setIsInitializedTC())\n    }, [dispatch])\n\n    if (!isInitialized) {\n        return <Row justify=\"center\" align=\"middle\" style={{height: '100vh'}}>\n            <Col span={1}>\n                <Spin size='large'/>\n            </Col>\n        </Row>\n    }\n\n    return (\n        <Layout className=\"layout\">\n            <Header style={{textAlign: 'right'}}>\n                {isLoggedIn ?\n                    <Button onClick={onLogoutClickModal}>Log Out</Button> : ''\n                }\n                <Modal title=\"Confirm log out\" visible={isModalVisible} onOk={logout} onCancel={closeModal}>\n                    <p>Are you sure you want to log out?</p>\n                </Modal>\n            </Header>\n            <Content style={{padding: '0 50px'}}>\n                <Switch>\n                    <Route exact path={PATH.TODOS} render={() => <Todolists/>}/>\n                    <Route path={PATH.LOGIN} render={() => <Login/>}/>\n                    <Route render={() => <Error404/>}/>\n                </Switch>\n            </Content>\n            <Footer style={{textAlign: 'center'}}>\n                Todolist\n            </Footer>\n        </Layout>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {tasksReducer} from './tasks-reducer';\r\nimport {authReducer} from './auth-reducer';\r\nimport {appReducer} from './app-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    auth: authReducer,\r\n    app: appReducer\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from './redux/redux-store';\nimport {Provider} from 'react-redux';\nimport 'antd/dist/antd.css'\nimport {HashRouter} from 'react-router-dom';\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["Todolist/Todolist.module.css","App.module.css","common/AddItemForm/AddItemForm.module.css","Task/Task.module.css","Login/Login.module.css","Task/Task.tsx","common/AddItemForm/AddItemForm.tsx","api/todolosts-api.ts","redux/tasks-reducer.ts","Todolist/Todolist.tsx","redux/todolists-reducer.ts","Todolists/Todolists.tsx","redux/auth-reducer.ts","Login/Login.tsx","Error404/Error404.tsx","redux/app-reducer.ts","App.tsx","reportWebVitals.ts","redux/redux-store.ts","index.tsx"],"names":["module","exports","TaskStatus","TaskPriorities","AddItemForm","props","useState","title","setTitle","className","s","addItemForm","type","value","onChange","e","currentTarget","onKeyPress","charCode","callback","onClick","size","shape","style","margin","icon","PlusOutlined","Task","React","memo","task","checked","status","Completed","newIsDoneValue","target","changeTaskStatus","New","todolistId","taskId","deleteTask","DeleteTwoTone","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","delete","tasksAPI","model","put","authAPI","data","initialState","Todolist","dispatch","useDispatch","filter","setFilter","useEffect","id","then","res","tasks","items","setTasks","filteredTasks","t","todolist","bordered","extra","removeTodolist","addTask","map","todoListId","filterButtons","Todolists","todolists","isLoggedIn","useSelector","state","auth","removeTask","useCallback","deleteTaskTC","addNewTodolist","resultCode","newTodolistId","item","addTodolist","addTodolistTC","addTaskTC","removeTodolistTC","getState","currentTask","find","description","deadline","priority","startDate","changeTaskStatusAC","changeTaskStatusTC","addNewTodo","justify","gutter","tl","allTodolistTasks","xs","sm","md","lg","xl","xxl","to","PATH","LOGIN","setIsLoggedIn","Login","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","tailLayout","wrapperCol","offset","span","TODOS","login","backgroundColor","textAlign","padding","onFinish","handleSubmit","labelCol","Item","label","getFieldProps","Password","htmlType","Error404","subTitle","isInitialized","App","Header","Layout","Content","Footer","app","isModalVisible","setIsModalVisible","visible","onOk","onCancel","exact","path","render","align","height","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","newTodolist","addedDate","order","stateCopy","forEach","newTasks","store","createStore","applyMiddleware","thunk","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.09c5c01c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"Todolist_todolist__2GHRM\",\"filterButtons\":\"Todolist_filterButtons__1XsU7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addNewTodo\":\"App_addNewTodo__2wks0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addItemForm\":\"AddItemForm_addItemForm__34y95\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__27E1W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2cSAn\"};","import React from 'react';\r\nimport s from './Task.module.css'\r\nimport {Button, Checkbox} from 'antd';\r\nimport {DeleteTwoTone} from '@ant-design/icons';\r\nimport {CheckboxChangeEvent} from 'antd/lib/checkbox';\r\n\r\nexport enum TaskStatus {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatus\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype TaskPropsType = {\r\n    title: string\r\n    taskId: string\r\n    todolistId: string\r\n    deleteTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (status: TaskStatus, todolistId: string, taskId: string) => void\r\n    status: TaskStatus\r\n}\r\n\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onDeleteTaskClick = () => {\r\n        props.deleteTask(props.taskId, props.todolistId)\r\n    }\r\n\r\n    const onCheckboxHandler = (e: CheckboxChangeEvent) => {\r\n        let newIsDoneValue = e.target.checked\r\n        props.changeTaskStatus(newIsDoneValue ? TaskStatus.Completed : TaskStatus.New, props.todolistId, props.taskId)\r\n    }\r\n\r\n    return (\r\n        <div className={s.task}>\r\n            <span>\r\n                <Checkbox style={{margin: '0 10px 0 0'}} checked={props.status === TaskStatus.Completed}\r\n                          onChange={onCheckboxHandler}/>\r\n                {props.title}\r\n            </span>\r\n            <span>\r\n                <Button onClick={onDeleteTaskClick} type='text' shape=\"circle\" icon={<DeleteTwoTone/>}\r\n                        size='middle'/>\r\n            </span>\r\n        </div>\r\n    )\r\n})\r\n","import React, {ChangeEvent, MouseEvent, useState, KeyboardEvent} from 'react';\r\nimport {Button, Input} from 'antd';\r\nimport s from './AddItemForm.module.css'\r\nimport {PlusOutlined} from '@ant-design/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    callback: (newTitle: string) => void\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormPropsType) => {\r\n\r\n    let [title, setTitle] = useState('')\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onClickHandler = (e: MouseEvent<HTMLButtonElement>) => {\r\n        props.callback(title)\r\n        setTitle('')\r\n    }\r\n\r\n    const onEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(e.charCode === 13){\r\n            props.callback(title)\r\n            setTitle('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.addItemForm}>\r\n            <Input type='text' value={title} onChange={onChangeHandler} onKeyPress={onEnterHandler}/>\r\n            <Button onClick={onClickHandler} type='primary' size='small' shape=\"circle\"\r\n                    style={{margin: '0 5px'}} icon={<PlusOutlined />} />\r\n        </div>\r\n    )\r\n}","import axios from 'axios'\r\nimport {TaskPriorities, TaskStatus, TaskType} from '../Task/Task';\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '99efda20-dfa9-469b-8832-45007a73919e'\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get('todo-lists')\r\n    },\r\n    addTodolist(title: string) {\r\n        return instance.post(`todo-lists`, {title: title})\r\n    },\r\n    removeTodolist(todolistId: string) {\r\n        return instance.delete(`todo-lists/${todolistId}`)\r\n    }\r\n}\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    removeTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    addTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>(`auth/login`, data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>(`auth/me`)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatus\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}","import {Dispatch} from 'redux';\r\nimport {tasksAPI, UpdateTaskModelType} from '../api/todolosts-api';\r\nimport {TaskStatus, TaskType} from '../Task/Task';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer';\r\nimport {AppRootStateType} from './redux-store';\r\n\r\nexport type SetTasksActionType = ReturnType<typeof setTasks>\r\nexport type DeleteTaskActionType = ReturnType<typeof deleteTask>\r\nexport type AddTaskActionType = ReturnType<typeof addTask>\r\nexport type ChangeTaskStatusActionType = ReturnType<typeof changeTaskStatusAC>\r\n\r\ntype ActionType =\r\n    SetTodolistsActionType\r\n    | SetTasksActionType\r\n    | DeleteTaskActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst initialState: any = []\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET_TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case 'SET_TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE_TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId]\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId)\r\n            stateCopy[action.todolistId] = newTasks\r\n            return stateCopy\r\n        }\r\n        case 'ADD_TASK': {\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        }\r\n        case 'ADD_TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'CHANGE_TASK_STATUS': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId]\r\n            const newTasks = tasks.map(t => t.id === action.taskId ? {...t, status: action.status} : t)\r\n            stateCopy[action.todolistId] = newTasks\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE_TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todolistId]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setTasks = (tasks: any, todolistId: any) => ({type: 'SET_TASKS', tasks, todolistId} as const)\r\n\r\nexport const deleteTask = (taskId: string, todolistId: string) => ({type: 'REMOVE_TASK', taskId, todolistId} as const)\r\n\r\nexport const addTask = (task: TaskType) => ({type: 'ADD_TASK', task} as const)\r\n\r\nexport const changeTaskStatusAC = (status: TaskStatus, todolistId: string, taskId: string) => (\r\n    {type: 'CHANGE_TASK_STATUS', status, todolistId, taskId} as const)\r\n\r\nexport const fetchTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        tasksAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                const tasks = res.data.items\r\n                dispatch(setTasks(tasks, todolistId))\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport const deleteTaskTC = (taskId: string, todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        tasksAPI.removeTask(todolistId, taskId)\r\n            .then((res) => {\r\n                dispatch(deleteTask(taskId, todolistId))\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        tasksAPI.addTask(todolistId, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTask(res.data.data.item))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeTaskStatusTC = (status: TaskStatus, todolistId: string, taskId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n        const task = getState().tasks[todolistId]\r\n        const currentTask = task.find((t) => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        if (currentTask) {\r\n            const model: UpdateTaskModelType = {\r\n                title: currentTask.title,\r\n                description: currentTask.description,\r\n                deadline: currentTask.deadline,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                status: status\r\n            }\r\n            tasksAPI.updateTask(todolistId, taskId, model)\r\n                .then((res) => {\r\n                    dispatch(changeTaskStatusAC(status, todolistId, taskId))\r\n                })\r\n        }\r\n\r\n    }\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {Task, TaskStatus, TaskType} from '../Task/Task';\r\nimport s from './Todolist.module.css'\r\nimport {useDispatch} from 'react-redux';\r\nimport {fetchTasksTC} from '../redux/tasks-reducer';\r\nimport {AddItemForm} from '../common/AddItemForm/AddItemForm';\r\nimport {DeleteTwoTone} from '@ant-design/icons';\r\nimport {Button, Card} from 'antd';\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    deleteTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (status: TaskStatus, todolistId: string, taskId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n}\r\nexport type FilterType = 'all' | 'completed' | 'active'\r\n\r\n\r\nexport const Todolist = React.memo((props: TodolistPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const [filter, setFilter] = useState<FilterType>('all')\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [dispatch, props.id])\r\n\r\n    const onDeleteTodolistClick = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const addTaskClick = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const onAllFilter = () => {\r\n        setFilter('all')\r\n    }\r\n    const onActiveFilter = () => {\r\n        setFilter('active')\r\n    }\r\n    const onCompletedFilter = () => {\r\n        setFilter('completed')\r\n    }\r\n\r\n    let filteredTasks = props.tasks\r\n\r\n    if (filter === 'active') {\r\n        filteredTasks = props.tasks.filter(t => t.status !== TaskStatus.Completed)\r\n    }\r\n    if (filter === 'completed') {\r\n        filteredTasks = props.tasks.filter(t => t.status === TaskStatus.Completed)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.todolist}>\r\n\r\n            <Card title={props.title} bordered={false}\r\n                  extra={<Button onClick={onDeleteTodolistClick} type='text' shape=\"circle\"\r\n                                 icon={<DeleteTwoTone/>} size='large'/>}\r\n                  style={{margin: '15px 0'}}\r\n            >\r\n                <AddItemForm callback={addTaskClick}/>\r\n                <div>\r\n                    {\r\n                        filteredTasks.map((t) => {\r\n                            return <Task key={t.id} title={t.title} taskId={t.id} todolistId={t.todoListId}\r\n                                         deleteTask={props.deleteTask} changeTaskStatus={props.changeTaskStatus}\r\n                                         status={t.status}/>\r\n                        })\r\n                    }\r\n                </div>\r\n                <div className={s.filterButtons}>\r\n                    <Button type={filter === 'all' ? 'primary' : 'default'} onClick={onAllFilter}>All</Button>\r\n                    <Button type={filter === 'active' ? 'primary' : 'default'} onClick={onActiveFilter}>Active</Button>\r\n                    <Button type={filter === 'completed' ? 'primary' : 'default'} onClick={onCompletedFilter}>Completed</Button>\r\n                </div>\r\n            </Card>\r\n        </div>\r\n\r\n    )\r\n})","import {TodolistType} from '../Todolist/Todolist';\r\nimport {Dispatch} from 'redux';\r\nimport {todolistsAPI} from '../api/todolosts-api';\r\n\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolists>\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolist>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolist>\r\n\r\ntype ActionType = SetTodolistsActionType | AddTodolistActionType | RemoveTodolistActionType\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'SET_TODOLISTS': {\r\n            return action.todolists\r\n        }\r\n        case 'ADD_TODOLIST': {\r\n            const newTodolist: TodolistType = {\r\n                title: action.title,\r\n                id: action.todolistId,\r\n                addedDate: '',\r\n                order: 0\r\n            }\r\n            return [newTodolist, ...state]\r\n        }\r\n        case 'REMOVE_TODOLIST': {\r\n            return state.filter(t => t.id !== action.todolistId)\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setTodolists = (todolists: Array<TodolistType>) => ({type: 'SET_TODOLISTS', todolists} as const)\r\nexport const addTodolist = (title: string, todolistId: string) => ({type: 'ADD_TODOLIST', title, todolistId} as const)\r\nexport const removeTodolist = (todolistId: string) => ({type: 'REMOVE_TODOLIST', todolistId} as const)\r\n\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolists(res.data))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.addTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    const newTodolistId = res.data.data.item.id\r\n                    dispatch(addTodolist(title, newTodolistId))\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.removeTodolist(todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTodolist(todolistId))\r\n                }\r\n        })\r\n\r\n    }\r\n}","import React, {useCallback, useEffect, useState} from 'react';\r\nimport s from '../App.module.css';\r\nimport {AddItemForm} from '../common/AddItemForm/AddItemForm';\r\nimport {Col, Row} from 'antd';\r\nimport {Todolist, TodolistType} from '../Todolist/Todolist';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../redux/redux-store';\r\nimport {addTaskTC, changeTaskStatusTC, deleteTaskTC, TasksStateType} from '../redux/tasks-reducer';\r\nimport {addTodolistTC, fetchTodolistsTC, removeTodolistTC} from '../redux/todolists-reducer';\r\nimport {TaskStatus} from '../Task/Task';\r\nimport {PATH} from '../App';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\n\r\nexport const Todolists = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [dispatch])\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    let todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    let tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\r\n        dispatch(deleteTaskTC(taskId, todolistId))\r\n    }, [dispatch])\r\n\r\n    const addNewTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(title, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((status: TaskStatus, todolistId: string, taskId: string) => {\r\n        dispatch(changeTaskStatusTC(status, todolistId, taskId))\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.addNewTodo}>\r\n                <AddItemForm callback={addNewTodolist}/>\r\n            </div>\r\n            <div className=\"site-card-wrapper\">\r\n                <Row justify='center' gutter={16}>\r\n                    {\r\n                        todolists.map((tl) => {\r\n                            let allTodolistTasks = tasks[tl.id]\r\n\r\n                            return (\r\n                                <Col xs={22} sm={12} md={10} lg={8} xl={6} xxl={6}>\r\n                                    <Todolist key={tl.id} id={tl.id} title={tl.title}\r\n                                              tasks={allTodolistTasks}\r\n                                              deleteTask={removeTask} removeTodolist={removeTodolist}\r\n                                              addTask={addTask} changeTaskStatus={changeTaskStatus}/>\r\n                                </Col>\r\n                            )\r\n                        })}\r\n                </Row>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {Dispatch} from 'redux';\r\nimport {authAPI, LoginParamsType} from '../api/todolosts-api';\r\n\r\nexport type SetIsLoggedInActionType = ReturnType<typeof setIsLoggedIn>\r\n\r\ntype ActionType = SetIsLoggedInActionType\r\n\r\nexport type AuthStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: AuthStateType = initialState, action: ActionType): AuthStateType => {\r\n    switch (action.type) {\r\n        case 'SET_IS_LOGGED_IN': {\r\n            return {...state, isLoggedIn: action.value}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setIsLoggedIn = (value: boolean) => ({type: 'SET_IS_LOGGED_IN', value} as const)\r\n\r\n\r\nexport const setIsLoggedInTC = (data: LoginParamsType) => {\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.login(data)\r\n            .then((res) => {\r\n                if(res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedIn(true))\r\n                }\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport const setIsLoggedOutTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.logout()\r\n            .then((res) => {\r\n                if(res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedIn(false))\r\n                }\r\n            })\r\n\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './Login.module.css'\r\nimport {useFormik} from 'formik';\r\nimport {Button, Checkbox, Col, Form, Input, Row} from 'antd';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../redux/redux-store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {PATH} from '../App';\r\nimport {setIsLoggedInTC} from '../redux/auth-reducer';\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(setIsLoggedInTC(values))\r\n        },\r\n    });\r\n\r\n    const layout = {\r\n        labelCol: {span: 6},\r\n        wrapperCol: {span: 16},\r\n    }\r\n    const tailLayout = {\r\n        wrapperCol: {offset: 6, span: 16},\r\n    };\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={PATH.TODOS}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.login}>\r\n            <Row justify='center'>\r\n                <Col xs={18} sm={16} md={12} lg={10} xl={8} xxl={4} style={{backgroundColor: '#fff'}}>\r\n                    <div style={{textAlign: 'center', padding: '10px 0 0 5px'}}>\r\n                        <p>To log in get registered here</p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </div>\r\n                    <Form onFinish={formik.handleSubmit}\r\n                          {...layout}>\r\n                        <Form.Item label='Email'>\r\n                            <Input\r\n                                id='email'\r\n                                type='email'\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                        </Form.Item>\r\n                        <Form.Item label='Password'>\r\n                            <Input.Password\r\n                                id='password'\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n                        </Form.Item>\r\n                        <Form.Item {...tailLayout}>\r\n                            <Checkbox id='rememberMe' {...formik.getFieldProps('rememberMe')}>Remember me</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item {...tailLayout}>\r\n                            <Button type='primary' htmlType='submit'>Submit</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Button, Result} from 'antd';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {PATH} from '../App';\r\n\r\nexport const Error404 = () => {\r\n    return (\r\n        <div>\r\n            <Result\r\n                status=\"404\"\r\n                title=\"404\"\r\n                subTitle=\"Sorry, the page you visited does not exist.\"\r\n                extra={<Button type=\"primary\"><NavLink to={PATH.TODOS}>Back Home</NavLink></Button>}\r\n            />\r\n        </div>\r\n    )\r\n}","import {Dispatch} from 'redux';\r\nimport {authAPI} from '../api/todolosts-api';\r\nimport {setIsLoggedIn} from './auth-reducer';\r\n\r\n\r\nexport type SetIsInitializedActionType = ReturnType<typeof setIsInitialized>\r\n\r\ntype ActionType = SetIsInitializedActionType\r\n\r\nexport type AppStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: AppStateType = initialState, action: ActionType): AppStateType => {\r\n    switch (action.type) {\r\n        case 'SET_IS_INITIALIZED': {\r\n            return {...state, isInitialized: action.value}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setIsInitialized = (value: boolean) => ({type: 'SET_IS_INITIALIZED', value} as const)\r\n\r\n\r\nexport const setIsInitializedTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.me()\r\n            .then((res) => {\r\n                if(res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedIn(true))\r\n                }\r\n                dispatch(setIsInitialized(true))\r\n            })\r\n\r\n    }\r\n}\r\n\r\n\r\n","import React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {Button, Col, Layout, Modal, Row, Spin} from 'antd';\nimport {Todolists} from './Todolists/Todolists';\nimport {Route, Switch} from 'react-router-dom';\nimport {Login} from './Login/Login';\nimport {Error404} from './Error404/Error404';\nimport {AppRootStateType} from './redux/redux-store';\nimport {setIsLoggedOutTC} from './redux/auth-reducer';\nimport {setIsInitializedTC} from './redux/app-reducer';\n\nexport const PATH = {\n    TODOS: '/',\n    LOGIN: '/login',\n}\n\nconst App = () => {\n    const dispatch = useDispatch()\n\n    const {Header, Content, Footer} = Layout;\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\n\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    const onLogoutClickModal = () => {\n        setIsModalVisible(true)\n    }\n\n    const logout = () => {\n        setIsModalVisible(false)\n        dispatch(setIsLoggedOutTC())\n    }\n    const closeModal = () => {\n        setIsModalVisible(false)\n    }\n\n    useEffect(() => {\n        dispatch(setIsInitializedTC())\n    }, [dispatch])\n\n    if (!isInitialized) {\n        return <Row justify=\"center\" align=\"middle\" style={{height: '100vh'}}>\n            <Col span={1}>\n                <Spin size='large'/>\n            </Col>\n        </Row>\n    }\n\n    return (\n        <Layout className=\"layout\">\n            <Header style={{textAlign: 'right'}}>\n                {isLoggedIn ?\n                    <Button onClick={onLogoutClickModal}>Log Out</Button> : ''\n                }\n                <Modal title=\"Confirm log out\" visible={isModalVisible} onOk={logout} onCancel={closeModal}>\n                    <p>Are you sure you want to log out?</p>\n                </Modal>\n            </Header>\n            <Content style={{padding: '0 50px'}}>\n                <Switch>\n                    <Route exact path={PATH.TODOS} render={() => <Todolists/>}/>\n                    <Route path={PATH.LOGIN} render={() => <Login/>}/>\n                    <Route render={() => <Error404/>}/>\n                </Switch>\n            </Content>\n            <Footer style={{textAlign: 'center'}}>\n                Todolist\n            </Footer>\n        </Layout>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {tasksReducer} from './tasks-reducer';\r\nimport {authReducer} from './auth-reducer';\r\nimport {appReducer} from './app-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    auth: authReducer,\r\n    app: appReducer\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from './redux/redux-store';\nimport {Provider} from 'react-redux';\nimport 'antd/dist/antd.css'\nimport {HashRouter} from 'react-router-dom';\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
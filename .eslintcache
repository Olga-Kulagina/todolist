[{"C:\\Incubator\\Todolist\\todolist\\src\\reportWebVitals.ts":"1","C:\\Incubator\\Todolist\\todolist\\src\\App.tsx":"2","C:\\Incubator\\Todolist\\todolist\\src\\index.tsx":"3","C:\\Incubator\\Todolist\\todolist\\src\\redux\\todolists-reducer.ts":"4","C:\\Incubator\\Todolist\\todolist\\src\\api\\todolosts-api.ts":"5","C:\\Incubator\\Todolist\\todolist\\src\\Task\\Task.tsx":"6","C:\\Incubator\\Todolist\\todolist\\src\\Todolist\\Todolist.tsx":"7","C:\\Incubator\\Todolist\\todolist\\src\\redux\\redux-store.ts":"8","C:\\Incubator\\Todolist\\todolist\\src\\redux\\tasks-reducer.ts":"9","C:\\Incubator\\Todolist\\todolist\\src\\common\\AddItemForm\\AddItemForm.tsx":"10"},{"size":425,"mtime":1606727322450,"results":"11","hashOfConfig":"12"},{"size":2032,"mtime":1609669976653,"results":"13","hashOfConfig":"12"},{"size":616,"mtime":1611007879987,"results":"14","hashOfConfig":"12"},{"size":2454,"mtime":1609670152576,"results":"15","hashOfConfig":"12"},{"size":1015,"mtime":1609623506250,"results":"16","hashOfConfig":"12"},{"size":1202,"mtime":1609624127997,"results":"17","hashOfConfig":"12"},{"size":1740,"mtime":1609624171347,"results":"18","hashOfConfig":"12"},{"size":489,"mtime":1609181696584,"results":"19","hashOfConfig":"12"},{"size":3266,"mtime":1609670152327,"results":"20","hashOfConfig":"12"},{"size":767,"mtime":1611009194412,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18sljh3",{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Incubator\\Todolist\\todolist\\src\\reportWebVitals.ts",[],"C:\\Incubator\\Todolist\\todolist\\src\\App.tsx",["44"],"import React, {useCallback, useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport './App.css';\nimport {Todolist, TodolistType} from './Todolist/Todolist';\nimport {addTodolistTC, fetchTodolistsTC, removeTodolistTC} from './redux/todolists-reducer';\nimport {AppRootStateType} from './redux/redux-store';\nimport {addTaskTC, deleteTaskTC, TasksStateType} from './redux/tasks-reducer';\nimport {AddItemForm} from './common/AddItemForm/AddItemForm';\nimport {TaskType} from './Task/Task';\n\nconst App = () => {\n    const dispatch = useDispatch()\n\n    let todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\n    let tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n\n    useEffect(() => {\n        dispatch(fetchTodolistsTC())\n    }, [dispatch])\n\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\n        dispatch(deleteTaskTC(taskId, todolistId))\n    }, [dispatch])\n\n    const addNewTodolist = useCallback((title: string) => {\n        dispatch(addTodolistTC(title))\n    }, [dispatch])\n\n    const addTask = useCallback((title: string, todolistId: string) => {\n        dispatch(addTaskTC(title, todolistId))\n    }, [dispatch])\n\n    const\n        removeTodolist = useCallback((todolistId: string) => {\n            dispatch(removeTodolistTC(todolistId))\n        }, [dispatch])\n\n\n    return (\n        <div className=\"App\">\n            <div>\n                <AddItemForm callback={addNewTodolist}/>\n                {\n                    todolists.map((tl) => {\n                        let allTodolistTasks = tasks[tl.id]\n\n                        return (\n                            <Todolist key={tl.id} id={tl.id} title={tl.title} tasks={allTodolistTasks}\n                                      deleteTask={removeTask} removeTodolist={removeTodolist}\n                                      addTask={addTask}/>\n                        )\n                    })}\n            </div>\n\n\n        </div>\n    );\n}\n\nexport default App;\n",["45","46"],"C:\\Incubator\\Todolist\\todolist\\src\\index.tsx",[],"C:\\Incubator\\Todolist\\todolist\\src\\redux\\todolists-reducer.ts",[],"C:\\Incubator\\Todolist\\todolist\\src\\api\\todolosts-api.ts",[],"C:\\Incubator\\Todolist\\todolist\\src\\Task\\Task.tsx",["47"],"C:\\Incubator\\Todolist\\todolist\\src\\Todolist\\Todolist.tsx",[],"C:\\Incubator\\Todolist\\todolist\\src\\redux\\redux-store.ts",[],"C:\\Incubator\\Todolist\\todolist\\src\\redux\\tasks-reducer.ts",[],"C:\\Incubator\\Todolist\\todolist\\src\\common\\AddItemForm\\AddItemForm.tsx",["48"],{"ruleId":"49","severity":1,"message":"50","line":9,"column":9,"nodeType":"51","messageId":"52","endLine":9,"endColumn":17},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"49","severity":1,"message":"57","line":2,"column":9,"nodeType":"51","messageId":"52","endLine":2,"endColumn":20},{"ruleId":"49","severity":1,"message":"58","line":3,"column":8,"nodeType":"51","messageId":"52","endLine":3,"endColumn":9},"@typescript-eslint/no-unused-vars","'TaskType' is defined but never used.","Identifier","unusedVar","no-native-reassign",["59"],"no-negated-in-lhs",["60"],"'AddItemForm' is defined but never used.","'s' is defined but never used.","no-global-assign","no-unsafe-negation"]